package newgame.items;

import com.badlogic.gdx.graphics.Texture;

import de.fhbielefeld.pmdungeon.vorgaben.dungeonCreator.DungeonWorld;
import de.fhbielefeld.pmdungeon.vorgaben.interfaces.IDrawable;
import de.fhbielefeld.pmdungeon.vorgaben.tools.Point;
import newgame.IHashableEntity;
import newgame.items.weapons.Weapon;
import newgame.logger.GameEventsLogger;
import newgame.logger.LogMessages;

/**
 * Represents all Item pickups in the Dungeon
 * @author Dominik Haacke
 *
 */
public class DungeonItem implements IDrawable, IHashableEntity
{
	private Point currentPosition;
	
	private boolean isPickedUp = false;
	
	private final Item item;
	
	private DungeonWorld currentDungeonWorld;
   
	/**
	 * Create a item that can be picked up by the hero, parameters have to be set accordingly to the ItemType.
	 * To create a new dungeon item, set not necessary attributes to 0 and/or null
	 */
	public DungeonItem(final Item item)
	{
		if (item == null)
		{
			GameEventsLogger.getLogger().severe(LogMessages.ILLEGAL_ARGUMENT.toString());
			throw new IllegalArgumentException();
		}
		this.item = item;
	}

	@Override
	public Texture getTexture()
	{
		return this.item.getTexture();
	}
	
    @Override
    public Point getPosition() 
	{
		return currentPosition;
	}

	@Override
	public boolean deleteable() 
	{
		return false;
	}

	@Override
	public void update() 
	{
		if(this.item instanceof Weapon)
		{
			this.drawWithScaling(0.5f, 0.9f);
		}
		else
		{
			this.draw();
		}
	}
	
	/**
	 * Returns true, if the item got already picked up.
	 * @return boolean item picked up
	 */
	public boolean isPickedUp()
	{
		return isPickedUp;
	}
	
	/** Set the level in which the DungeonItem currently is.
     * 
     * The start position in the new level will be randomized.
     *
     * @param level New level
     */
    public void setLocation(final DungeonWorld level) throws IllegalArgumentException
    {
		if (level == null)
		{
			GameEventsLogger.getLogger().severe(LogMessages.ILLEGAL_ARGUMENT.toString());
			throw new IllegalArgumentException();
		}
        this.currentDungeonWorld = level;
        findRandomPosition();
    }

	/** Set the level in which the DungeonItem currently is.
	 * 
	 * @param level New level
	 * @param position Defined position at which item will be placed
	 */
	public void setLocation(final DungeonWorld level, final Point position) throws IllegalArgumentException
	{
		if (level == null || position == null)
		{
			GameEventsLogger.getLogger().severe(LogMessages.ILLEGAL_ARGUMENT.toString());
			throw new IllegalArgumentException();
		}
		this.currentDungeonWorld = level;
		this.currentPosition = position;
	}
    
    public void setPickUpStatus(final boolean status)
	{
		this.isPickedUp = status;
	}
    
    /**
	 * Returns the InventoryItem generated by the dungeon Item
	 * @return InventoryItem
     */
    public Item getItem()
    {
		return this.item;
    }
    
 	/** 
	 * Set the DungeonItem position to a new random location inside the level
     */
    private void findRandomPosition()
    {
    	this.currentPosition = new Point(currentDungeonWorld.getRandomPointInDungeon());
    }
}